// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package suncertify.remote;

public final class RemoteDataFacadeImpl_Stub
    extends java.rmi.server.RemoteStub
    implements suncertify.remote.RemoteDataFacade
{
    private static final long serialVersionUID = 2;
    
    private static java.lang.reflect.Method $method_getRecordList_0;
    private static java.lang.reflect.Method $method_ping_1;
    private static java.lang.reflect.Method $method_remoteBookOperation_2;
    private static java.lang.reflect.Method $method_retrieveRecord_3;
    
    static {
	try {
	    $method_getRecordList_0 = suncertify.common.DataFacade.class.getMethod("getRecordList", new java.lang.Class[] {java.lang.String.class, java.lang.String.class, boolean.class});
	    $method_ping_1 = suncertify.common.DataFacade.class.getMethod("ping", new java.lang.Class[] {});
	    $method_remoteBookOperation_2 = suncertify.common.DataFacade.class.getMethod("remoteBookOperation", new java.lang.Class[] {java.lang.String.class, suncertify.common.Record.class});
	    $method_retrieveRecord_3 = suncertify.common.DataFacade.class.getMethod("retrieveRecord", new java.lang.Class[] {int.class});
	} catch (java.lang.NoSuchMethodException e) {
	    throw new java.lang.NoSuchMethodError(
		"stub class initialization failed");
	}
    }
    
    // constructors
    public RemoteDataFacadeImpl_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of getRecordList(String, String, boolean)
    public java.util.List getRecordList(java.lang.String $param_String_1, java.lang.String $param_String_2, boolean $param_boolean_3)
	throws java.io.IOException, suncertify.db.RecordNotFoundException
    {
	try {
	    Object $result = ref.invoke(this, $method_getRecordList_0, new java.lang.Object[] {$param_String_1, $param_String_2, new java.lang.Boolean($param_boolean_3)}, 2886696621767617027L);
	    return ((java.util.List) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of ping()
    public void ping()
	throws java.io.IOException
    {
	try {
	    ref.invoke(this, $method_ping_1, null, 5866401369815527589L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of remoteBookOperation(String, Record)
    public boolean remoteBookOperation(java.lang.String $param_String_1, suncertify.common.Record $param_Record_2)
	throws java.io.IOException, suncertify.common.AlreadyBookedException, suncertify.db.RecordNotFoundException
    {
	try {
	    Object $result = ref.invoke(this, $method_remoteBookOperation_2, new java.lang.Object[] {$param_String_1, $param_Record_2}, -2881336108128811213L);
	    return ((java.lang.Boolean) $result).booleanValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of retrieveRecord(int)
    public suncertify.common.Record retrieveRecord(int $param_int_1)
	throws java.io.IOException, suncertify.db.RecordNotFoundException
    {
	try {
	    Object $result = ref.invoke(this, $method_retrieveRecord_3, new java.lang.Object[] {new java.lang.Integer($param_int_1)}, -4051480124371603721L);
	    return ((suncertify.common.Record) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
